<Window
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	x:Class="ParserClient.MainWindow"
	x:Name="Window"
	Title="MathParser | Copyright (c) Gratian Lup"
	Width="690.557" Height="480" mc:Ignorable="d">
	<Window.Resources>
		<DataTemplate x:Key="DataTemplate1">
			<Grid>
				<TextBlock Width="200" Height="16" Text="{Binding Path=Nume, Mode=Default}" TextWrapping="Wrap"/>
				<TextBlock HorizontalAlignment="Right" Margin="0,0,-155,0" Width="128" Text="{Binding Path=Valoare, Mode=Default}" TextWrapping="Wrap"/>
			</Grid>
		</DataTemplate>
		<LinearGradientBrush x:Key="ExpanderArrowHoverFill" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#FFF0F8FE" Offset="0"/>
			<GradientStop Color="#FFE0F3FE" Offset="0.3"/>
			<GradientStop Color="#FF6FA7C5" Offset="1"/>
		</LinearGradientBrush>
		<LinearGradientBrush x:Key="ExpanderArrowPressedFill" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#FFDCF0FA" Offset="0"/>
			<GradientStop Color="#FFC5E6F7" Offset="0.2"/>
			<GradientStop Color="#FF5690D0" Offset="1"/>
		</LinearGradientBrush>
		<LinearGradientBrush x:Key="ExpanderArrowFill" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="White" Offset="0"/>
			<GradientStop Color="#FFBFBFBF" Offset="0.5"/>
			<GradientStop Color="#FF878787" Offset="1"/>
		</LinearGradientBrush>
		<Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid SnapsToDevicePixels="False" Background="Transparent">
								<Grid.RowDefinitions>
									<RowDefinition Height="19"/>
									<RowDefinition Height="*"/>
								</Grid.RowDefinitions>
								<Grid>
									<Grid.LayoutTransform>
										<TransformGroup>
											<TransformGroup.Children>
												<TransformCollection>
													<RotateTransform Angle="-90"/>
												</TransformCollection>
											</TransformGroup.Children>
										</TransformGroup>
									</Grid.LayoutTransform>
									<Ellipse x:Name="circle" Fill="{DynamicResource ExpanderArrowFill}" Stroke="DarkGray" HorizontalAlignment="Center" VerticalAlignment="Center" Width="19" Height="19"/>
									<Path x:Name="arrow" Stroke="#666" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
								</Grid>
								<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" VerticalAlignment="Top" SnapsToDevicePixels="True" Grid.Row="1" RecognizesAccessKey="True"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowHoverFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowPressedFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid SnapsToDevicePixels="False" Background="Transparent">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="19"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Grid>
									<Grid.LayoutTransform>
										<TransformGroup>
											<TransformGroup.Children>
												<TransformCollection>
													<RotateTransform Angle="180"/>
												</TransformCollection>
											</TransformGroup.Children>
										</TransformGroup>
									</Grid.LayoutTransform>
									<Ellipse x:Name="circle" Fill="{DynamicResource ExpanderArrowFill}" Stroke="DarkGray" HorizontalAlignment="Center" VerticalAlignment="Center" Width="19" Height="19"/>
									<Path x:Name="arrow" Stroke="#666" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
								</Grid>
								<ContentPresenter HorizontalAlignment="Left" Margin="4,0,0,0" VerticalAlignment="Center" SnapsToDevicePixels="True" Grid.Column="1" RecognizesAccessKey="True"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowHoverFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowPressedFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid SnapsToDevicePixels="False" Background="Transparent">
								<Grid.RowDefinitions>
									<RowDefinition Height="19"/>
									<RowDefinition Height="*"/>
								</Grid.RowDefinitions>
								<Grid>
									<Grid.LayoutTransform>
										<TransformGroup>
											<TransformGroup.Children>
												<TransformCollection>
													<RotateTransform Angle="90"/>
												</TransformCollection>
											</TransformGroup.Children>
										</TransformGroup>
									</Grid.LayoutTransform>
									<Ellipse x:Name="circle" Fill="{DynamicResource ExpanderArrowFill}" Stroke="DarkGray" HorizontalAlignment="Center" VerticalAlignment="Center" Width="19" Height="19"/>
									<Path x:Name="arrow" Stroke="#666" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
								</Grid>
								<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" VerticalAlignment="Top" SnapsToDevicePixels="True" Grid.Row="1" RecognizesAccessKey="True"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowHoverFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowPressedFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderHeaderFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Border>
							<Rectangle Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1" Margin="0" SnapsToDevicePixels="true"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}" CornerRadius="4,4,0,0" Background="{DynamicResource HeaderColor}" BorderThickness="0,0,0,1" BorderBrush="{TemplateBinding BorderBrush}">
							<Grid SnapsToDevicePixels="False" Background="Transparent">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="19"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Ellipse x:Name="circle" Stroke="DarkGray" HorizontalAlignment="Center" VerticalAlignment="Center" Width="15" Height="15" Margin="2,0,0,0"/>
								<Path x:Name="arrow" Stroke="#666" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 L 8,1.5" Margin="2,0,0,0"/>
								<ContentPresenter HorizontalAlignment="Left" Margin="4,0,0,0" VerticalAlignment="Center" SnapsToDevicePixels="True" Grid.Column="1" RecognizesAccessKey="True"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
								<Setter Property="Stroke" TargetName="circle" Value="{DynamicResource DisabledBorderBrush}"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource WindowBackgroundBrush}"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowPressedFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="VerticalContentAlignment" Value="Stretch"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Expander}">
						<Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
							<DockPanel>
								<ToggleButton x:Name="HeaderSite" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" Margin="0,0,0,0" MinHeight="0" MinWidth="0" Style="{StaticResource ExpanderDownHeaderStyle}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top" Height="28" BorderBrush="#00000000"/>
								<ContentPresenter x:Name="ExpandSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" Visibility="Collapsed" DockPanel.Dock="Bottom"/>
							</DockPanel>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsExpanded" Value="true">
								<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
								<Setter Property="BorderBrush" TargetName="HeaderSite" Value="#FF000000"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Right">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Up">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Left">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderDownHeaderStyle2" TargetType="{x:Type ToggleButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Padding="{TemplateBinding Padding}">
							<Grid SnapsToDevicePixels="False" Background="Transparent">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="19"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Ellipse x:Name="circle" Fill="{DynamicResource ExpanderArrowFill}" Stroke="DarkGray" HorizontalAlignment="Center" VerticalAlignment="Center" Width="19" Height="19"/>
								<Path x:Name="arrow" Stroke="#666" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="false" Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
								<ContentPresenter HorizontalAlignment="Left" Margin="4,0,0,0" VerticalAlignment="Center" SnapsToDevicePixels="True" Grid.Column="1" RecognizesAccessKey="True"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF3C7FB1"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowHoverFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#222"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Stroke" TargetName="circle" Value="#FF526C7B"/>
								<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
								<Setter Property="Fill" TargetName="circle" Value="{DynamicResource ExpanderArrowPressedFill}"/>
								<Setter Property="Stroke" TargetName="arrow" Value="#FF003366"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ExpanderStyleSasf" TargetType="{x:Type Expander}">
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="VerticalContentAlignment" Value="Stretch"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Expander}">
						<Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
							<DockPanel>
								<ToggleButton x:Name="HeaderSite" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" Margin="1" MinHeight="0" MinWidth="0" Style="{StaticResource ExpanderDownHeaderStyle}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top" Height="28"/>
								<ContentPresenter x:Name="ExpandSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" Visibility="Collapsed" DockPanel.Dock="Bottom"/>
							</DockPanel>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsExpanded" Value="true">
								<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Right">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Up">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
							</Trigger>
							<Trigger Property="ExpandDirection" Value="Left">
								<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
								<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
								<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ButtonStyle1" TargetType="{x:Type Button}" BasedOn="{x:Null}">
			<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
			<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
			<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
					
						<!-- We use Grid as a root because it is easy to add more elements to customize the button -->
						<Grid x:Name="Grid">
							<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="4,4,4,4" Background="#00F20000"/>
						
							<!-- Content Presenter is where the text content etc is placed by the control -->
							<!-- The bindings are useful so that the control can be parameterized without editing the template -->
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
						</Grid>
					
						<!--Each state sets a brush on the Border in the template -->
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true">
								<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Background" TargetName="Border" Value="#BFFF0000"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Background" TargetName="Border" Value="#FFFF0000"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="true"/>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
								<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
								<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Storyboard x:Key="ShowPanel">
			<ThicknessAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.Margin)">
				<SplineThicknessKeyFrame KeyTime="00:00:00" Value="0,0,0,-102"/>
				<SplineThicknessKeyFrame KeyTime="00:00:00.2000000" Value="0,0,0,0" KeySpline="0.498,0,0.5,0.996"/>
			</ThicknessAnimationUsingKeyFrames>
			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="grid" Storyboard.TargetProperty="(UIElement.Opacity)">
				<SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
				<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" KeySpline="0.498,0,0.5,0.996"/>
			</DoubleAnimationUsingKeyFrames>
		</Storyboard>
		<Storyboard x:Key="HidePanel">
			<ThicknessAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.Margin)">
				<SplineThicknessKeyFrame KeyTime="00:00:00.2000000" Value="0,0,0,-102" KeySpline="0.495,0,0.502,1"/>
			</ThicknessAnimationUsingKeyFrames>
			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="grid" Storyboard.TargetProperty="(UIElement.Opacity)">
				<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0" KeySpline="0.495,0,0.502,1"/>
			</DoubleAnimationUsingKeyFrames>
		</Storyboard>
	</Window.Resources>
	<Window.Triggers>
		<EventTrigger RoutedEvent="ButtonBase.Click" SourceName="button">
			<BeginStoryboard x:Name="HidePanel_BeginStoryboard" Storyboard="{StaticResource HidePanel}"/>
		</EventTrigger>
		<EventTrigger RoutedEvent="ButtonBase.Click" SourceName="EvaluateButton">
			<BeginStoryboard Storyboard="{StaticResource ShowPanel}"/>
		</EventTrigger>
	</Window.Triggers>
	<Window.Background>
		<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
			<GradientStop Color="#FFCCDAEC" Offset="1"/>
			<GradientStop Color="#FFFFFFFF" Offset="0.495"/>
		</LinearGradientBrush>
	</Window.Background>

	<Grid x:Name="LayoutRoot" d:DataContext="{Binding Source={StaticResource SampleDataSource}}">
		<Border Margin="8,8,234,98" BorderBrush="#BF000000" BorderThickness="1,1,1,1" CornerRadius="4,4,0,0">
			<Grid>
				<Border Margin="0,0,0,0" VerticalAlignment="Top" Height="28" BorderBrush="#FF000000" BorderThickness="0,0,0,1" CornerRadius="4,4,0,0" Background="{DynamicResource HeaderColor}">
					<Grid>
						<Label HorizontalAlignment="Left" Margin="0,1,0,0" VerticalAlignment="Center" Width="Auto" Content="Variables"/>
						<Button HorizontalAlignment="Right" Margin="0,0,62,0" Style="{DynamicResource SimpleButton}" Width="56" Height="20" Content="Add" BorderBrush="#7F000000" Background="#7FFFFFFF" Name="AddButton" Click="AddButton_Click" />
						<Button HorizontalAlignment="Right" Margin="0,0,4,0" Style="{DynamicResource SimpleButton}" Width="56" Content="Remove" BorderBrush="#7F000000" VerticalAlignment="Center" Height="20" Background="#7FFFFFFF" Name="RemoveButtoon" Click="RemoveButtoon_Click" />
					</Grid>
				</Border>
				<ListView Margin="0,28,0,57" IsSynchronizedWithCurrentItem="True" BorderThickness="0,0,0,0" Name="VariablesListView" SelectionChanged="VariablesListView_SelectionChanged" MouseDoubleClick="VariablesListView_MouseDoubleClick">
					<ListView.View>
						<GridView>
							<GridViewColumn Width="80" Header="Name" DisplayMemberBinding="{Binding Name}" />
    						<GridViewColumn Width="140" Header="Value" DisplayMemberBinding="{Binding Value}"/>
						</GridView>
					</ListView.View>
				</ListView>
				<Grid VerticalAlignment="Bottom" Height="57">
					<Grid.Background>
	
						<!-- PressedBrush is used for Pressed in Button, Radio Button, CheckBox -->
						<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
							<GradientStop Color="#FF9F9F9F" Offset="0.0"/>
							<GradientStop Color="#FFE2E2E2" Offset="0.1"/>
							<GradientStop Color="#EEE" Offset="1"/>
						</LinearGradientBrush>
					</Grid.Background>
					<TextBlock HorizontalAlignment="Left" Margin="8,8,0,0" VerticalAlignment="Top" Width="87" Height="16" TextWrapping="Wrap"><Run Text="Name"/></TextBlock>
					<TextBlock HorizontalAlignment="Left" Margin="8,0,0,8" VerticalAlignment="Bottom" Width="87" Height="16" TextWrapping="Wrap" Text="Value"/>
					<TextBox Margin="63,8,100,29" Text="" TextWrapping="Wrap" Height="20" Name="NameTextBox" LostFocus="NameTextBox_LostFocus" />
					<TextBox Margin="63,0,100,5" Text="" TextWrapping="Wrap" Height="20" VerticalAlignment="Bottom" Name="ValueTextBox" LostFocus="ValueTextBox_LostFocus" />
				</Grid>
			</Grid>
		</Border>
		<ScrollViewer HorizontalAlignment="Right" Margin="0,8,8,84" Width="216" VerticalScrollBarVisibility="Auto">
			<StackPanel Width="Auto" Height="Auto" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
				<Expander Margin="0,0,2,0" Header="Available Functions" Height="Auto" Style="{DynamicResource ExpanderStyle1}" BorderBrush="#BF000000" IsExpanded="True">
					<Grid Background="#FF000000">
						<ListView Margin="0,0,0,0" BorderThickness="0,0,0,0" IsSynchronizedWithCurrentItem="True" Width="Auto" Height="194" VerticalAlignment="Stretch" Name="FunctionsListView" MouseDoubleClick="FunctionsListView_MouseDoubleClick">
							<ListView.View>
								<GridView>
									<GridViewColumn Width="80" Header="Name" DisplayMemberBinding="{Binding Name}" />
									<GridViewColumn Width="100" Header="Usage" DisplayMemberBinding="{Binding HelpString}" />
								</GridView>
							</ListView.View>
						</ListView>
					</Grid>
				</Expander>
				<Expander Margin="0,4,2,0" Header="Available Constants" Style="{DynamicResource ExpanderStyle1}" Height="Auto" BorderBrush="#BF000000" IsExpanded="True">
					<Grid Background="#FF000000">
						<ListView Margin="0,0,0,0" BorderThickness="0,0,0,0" IsSynchronizedWithCurrentItem="True" VerticalAlignment="Top" Width="Auto" Height="80" Name="AvailableVariablesListView" MouseDoubleClick="AvailableVariablesListView_MouseDoubleClick">
							<ListView.View>
								<GridView>
									<GridViewColumn Width="80" Header="Name" DisplayMemberBinding="{Binding Name}" />
									<GridViewColumn Width="100" Header="Value" DisplayMemberBinding="{Binding Value}"/>
								</GridView>
							</ListView.View>
						</ListView>
					</Grid>
				</Expander>
			</StackPanel>
		</ScrollViewer>
		<TextBox Margin="8,0,96,8" VerticalAlignment="Bottom" Height="80" Text="" TextWrapping="Wrap" Name="ExpressionTextBox" KeyDown="ExpressionTextBox_KeyDown" PreviewKeyDown="ExpressionTextBox_PreviewKeyDown" />
		<Button x:Name="EvaluateButton" HorizontalAlignment="Right" Margin="0,0,8,8" Style="{DynamicResource SimpleButton}" Width="84" Height="80" Content="Evaluate" BorderBrush="#7F000000" VerticalAlignment="Bottom" Background="{DynamicResource HeaderColor}" Click="EvaluateButton_Click" />
		<Grid x:Name="grid" VerticalAlignment="Bottom" Height="102" Visibility="Visible" Margin="0,0,0,-102">
			<Grid.Background>
				<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
					<GradientStop Color="#BF000000" Offset="0.109"/>
					<GradientStop Color="#00FFFFFF" Offset="0"/>
				</LinearGradientBrush>
			</Grid.Background>
			<TextBlock x:Name="ResultLabel" Margin="0,0,0,0" Text="0.0" TextWrapping="Wrap" FontSize="36" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFFFFFFF"/>
			<Button x:Name="button" HorizontalAlignment="Right" Margin="0,0,8,8.032" Style="{DynamicResource ButtonStyle1}" Width="84" Height="80" Content="X" VerticalAlignment="Bottom" Background="{x:Null}" FontSize="48" Foreground="#FFFFFFFF" BorderBrush="{x:Null}"/>
		</Grid>
	</Grid>
</Window>